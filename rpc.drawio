<mxfile host="app.diagrams.net" agent="Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36" version="24.7.13" pages="2">
  <diagram id="iWXKl9G3J7bvCjKLijZo" name="流程">
    <mxGraphModel dx="1514" dy="577" grid="1" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="0" pageScale="1" pageWidth="1169" pageHeight="827" math="0" shadow="0">
      <root>
        <mxCell id="0" />
        <mxCell id="1" parent="0" />
        <mxCell id="LFRQVlsYZJYM1K5Jmzf6-1" value="&lt;div&gt;&lt;font face=&quot;Arial, PingFang SC, Helvetica, Microsoft YaHei, Helvetica Neue, Hiragino Sans GB, WenQuanYi Micro Hei, sans-seri&quot; color=&quot;#343434&quot;&gt;&lt;span style=&quot;font-size: 14px; white-space-collapse: preserve;&quot;&gt;调用方启动流程&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;span style=&quot;color: rgb(52, 52, 52); font-family: Arial, &amp;quot;PingFang SC&amp;quot;, Helvetica, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;WenQuanYi Micro Hei&amp;quot;, sans-seri; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: pre-wrap; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; display: inline !important; float: none;&quot;&gt;1、初始化 key&lt;/span&gt;&lt;span style=&quot;color: rgb(52, 52, 52); font-family: Arial, &amp;quot;PingFang SC&amp;quot;, Helvetica, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;WenQuanYi Micro Hei&amp;quot;, sans-seri; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: pre-wrap; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(52, 52, 52); font-family: Arial, &amp;quot;PingFang SC&amp;quot;, Helvetica, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;WenQuanYi Micro Hei&amp;quot;, sans-seri; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: pre-wrap; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; display: inline !important; float: none;&quot;&gt;&lt;br&gt;启动流量上报周期任务、周期拉服务配置、降级信息&lt;/span&gt;&lt;span style=&quot;color: rgb(52, 52, 52); font-family: Arial, &amp;quot;PingFang SC&amp;quot;, Helvetica, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;WenQuanYi Micro Hei&amp;quot;, sans-seri; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: pre-wrap; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(52, 52, 52); font-family: Arial, &amp;quot;PingFang SC&amp;quot;, Helvetica, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;WenQuanYi Micro Hei&amp;quot;, sans-seri; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: pre-wrap; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; display: inline !important; float: none;&quot;&gt;&lt;br&gt;2、初始化默认 filter、router&lt;/span&gt;&lt;span style=&quot;color: rgb(52, 52, 52); font-family: Arial, &amp;quot;PingFang SC&amp;quot;, Helvetica, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;WenQuanYi Micro Hei&amp;quot;, sans-seri; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: pre-wrap; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(52, 52, 52); font-family: Arial, &amp;quot;PingFang SC&amp;quot;, Helvetica, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;WenQuanYi Micro Hei&amp;quot;, sans-seri; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: pre-wrap; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; display: inline !important; float: none;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(52, 52, 52); font-family: Arial, &amp;quot;PingFang SC&amp;quot;, Helvetica, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;WenQuanYi Micro Hei&amp;quot;, sans-seri; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: pre-wrap; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(52, 52, 52); font-family: Arial, &amp;quot;PingFang SC&amp;quot;, Helvetica, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;WenQuanYi Micro Hei&amp;quot;, sans-seri; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: pre-wrap; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; display: inline !important; float: none;&quot;&gt;3、创建服务代理&lt;/span&gt;&lt;span style=&quot;color: rgb(52, 52, 52); font-family: Arial, &amp;quot;PingFang SC&amp;quot;, Helvetica, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;WenQuanYi Micro Hei&amp;quot;, sans-seri; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: pre-wrap; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(52, 52, 52); font-family: Arial, &amp;quot;PingFang SC&amp;quot;, Helvetica, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;WenQuanYi Micro Hei&amp;quot;, sans-seri; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: pre-wrap; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; display: inline !important; float: none;&quot;&gt;&lt;br&gt;1）去注册中心拉取服务配置（重试），根据配置创建代理 ServiceProxy&lt;/span&gt;&lt;span style=&quot;color: rgb(52, 52, 52); font-family: Arial, &amp;quot;PingFang SC&amp;quot;, Helvetica, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;WenQuanYi Micro Hei&amp;quot;, sans-seri; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: pre-wrap; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; display: inline !important; float: none;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(52, 52, 52); font-family: Arial, &amp;quot;PingFang SC&amp;quot;, Helvetica, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;WenQuanYi Micro Hei&amp;quot;, sans-seri; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: pre-wrap; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(52, 52, 52); font-family: Arial, &amp;quot;PingFang SC&amp;quot;, Helvetica, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;WenQuanYi Micro Hei&amp;quot;, sans-seri; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: pre-wrap; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; display: inline !important; float: none;&quot;&gt;2）根据用户配置的 minPoolSize，提前创建连接&lt;/span&gt;&lt;div&gt;&lt;span style=&quot;color: rgb(52, 52, 52); font-family: Arial, &amp;quot;PingFang SC&amp;quot;, Helvetica, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;WenQuanYi Micro Hei&amp;quot;, sans-seri; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: pre-wrap; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(52, 52, 52); font-family: Arial, &amp;quot;PingFang SC&amp;quot;, Helvetica, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;WenQuanYi Micro Hei&amp;quot;, sans-seri; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: pre-wrap; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; display: inline !important; float: none;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;div&gt;&lt;span style=&quot;color: rgb(52, 52, 52); font-family: Arial, &amp;quot;PingFang SC&amp;quot;, Helvetica, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;WenQuanYi Micro Hei&amp;quot;, sans-seri; font-size: 14px; white-space-collapse: preserve; background-color: rgb(255, 255, 255);&quot;&gt;发起调用，走 jdk动态代理&lt;br&gt;1）设置请求上下文到 SCFRequest 中，如果是异步，需要有 callback&lt;br&gt;2）执行过滤器链，自定义 filter -&amp;gt; MethodCaller（真实调用）&lt;br&gt;     1）同步调用：获取 ServiceProxy，从 ServerPool 里依次经过 RouterChain、负载均衡（加权轮询）得到准备请求的服务节点，从该节点的连接池里获取一条连接，进行协议编码（含序列化），绑定 sessionId 和 WindowData（CDL）的关系，发送请求（扔到发送队列），归还连接到池中；根据 sessionId 从 WindowData 获取 CDL，并 await 超时时间，结果仍未返回则抛超时异常，返回了就解码（含反序列化），设置隐式传参，删除  sessionId 和 WindowData 的绑定关系，如果结果是返回异常，直接抛出，正常则返回，倒序执行过滤器，根据响应类型上报监控。&lt;br&gt;     2）异步调用：获取 ServiceProxy，从 ServerPool 里依次经过 RouterChain、负载均衡（加权轮询）得到准备请求的服务节点，从该节点的连接池里获取一条连接，进行协议编码（含序列化），绑定 sessionId 和 WindowData（存放本次请求的回调函数等信息）的关系，发送请求（扔到发送队列），归还连接到池中，直接返回默认值。DataReceiver 接收到响应后，根据 sessionId 找到 WindowData，进行协议解码（含反序列化），设置隐式传参，根据响应类型上报监控，倒序执行过滤器链，触发回调。&lt;/span&gt;&lt;span style=&quot;color: rgb(52, 52, 52); font-family: Arial, &amp;quot;PingFang SC&amp;quot;, Helvetica, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;WenQuanYi Micro Hei&amp;quot;, sans-seri; font-size: 14px; white-space-collapse: preserve; background-color: rgb(255, 255, 255);&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(52, 52, 52); font-family: Arial, &amp;quot;PingFang SC&amp;quot;, Helvetica, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;WenQuanYi Micro Hei&amp;quot;, sans-seri; font-size: 14px; white-space-collapse: preserve; background-color: rgb(255, 255, 255);&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(52, 52, 52); font-family: Arial, &amp;quot;PingFang SC&amp;quot;, Helvetica, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;WenQuanYi Micro Hei&amp;quot;, sans-seri; font-size: 14px; white-space-collapse: preserve; background-color: rgb(255, 255, 255);&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(52, 52, 52); font-family: Arial, &amp;quot;PingFang SC&amp;quot;, Helvetica, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;WenQuanYi Micro Hei&amp;quot;, sans-seri; font-size: 14px; white-space-collapse: preserve; background-color: rgb(255, 255, 255);&quot;&gt;&lt;br&gt;读 Channel 线程：SCF-Client-DataReceiver （4个），每个 CSocket new 出来后，对应的 Channel 会注册到一个 worker 的 selector 上，并关注 READ 事件&lt;br&gt;写 Channel 线程：SCF-Client-SendThread （half cpu），从 SendTask 队列里超时拉取，并写 Channel&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: rgb(52, 52, 52); font-family: Arial, &amp;quot;PingFang SC&amp;quot;, Helvetica, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;WenQuanYi Micro Hei&amp;quot;, sans-seri; font-size: 14px; white-space-collapse: preserve; background-color: rgb(255, 255, 255);&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;" style="text;whiteSpace=wrap;html=1;" parent="1" vertex="1">
          <mxGeometry x="70" y="150" width="720" height="410" as="geometry" />
        </mxCell>
        <mxCell id="6h5qNvNEeN3YrNKu4o-j-1" value="每个 CSocket（Channel） 创建后，就会注册到 DataReceiver （读数据线程）的 selector 上，并关注读事件，即使该 channel被归还到 socketPool 了，仍能正常执行读操作（channel 全双工）" style="text;html=1;align=center;verticalAlign=middle;resizable=0;points=[];autosize=1;strokeColor=none;fillColor=none;" parent="1" vertex="1">
          <mxGeometry x="-90" y="640" width="1040" height="30" as="geometry" />
        </mxCell>
        <UserObject label="&lt;span style=&quot;color: rgb(52, 52, 52); font-family: Arial, &amp;quot;PingFang SC&amp;quot;, Helvetica, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;WenQuanYi Micro Hei&amp;quot;, sans-seri; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: pre-wrap; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; display: inline !important; float: none;&quot;&gt;服务启动流程：&lt;br&gt;1）初始化配置：初始化this.proxyBServiceBService默认配置；读取 scf_config.xml 配置文件重新覆盖配置；加载自定义日志实现；&lt;br&gt;2）创建框架自定义类加载器 SCFClassLoader，添加业务 jar 为加载路径&lt;br&gt;3）执行 IInit 实现类的 init 方法，可加载资源等（服务代理创建前）&lt;br&gt;4）扫描 service 目录下所有 jar（配置了不扫描的 jar 则直接跳过），找到所有 class 文件并加载，找到标注了服务注解、@Activate 的类，存起来(SessionBean)，通过 javassist 新建接口实现类代理（lookupProxyStubtime），新建 ProxyFactorytime（可根据 lookup 找到 lookupProxyStubtime），使用 SCFClassLoader 加载这些 class （find class），并反射创建实例（lookupProxyStubtime 和 ProxyFactorytime），把 ProxyFactorytime，存到 Global 里（注意：实际的服务实现类和方法的调用是非反射）&lt;br&gt;5）执行 IInit 实现类的 init 方法，可加载资源等（服务代理创建后）&lt;br&gt;6）加载并创建 IShutDown 实现类（用户指定），放到 Global 里&lt;br&gt;7）序列化扫包&lt;br&gt;8）加载并实例化 Filter（配置文件配置 + 注解配置），执行 init 方法，true 则加入 FilterChain&lt;br&gt;9）注册信号，linux 平台下收到 kill -15，往发注册中心发送节点下线请求&lt;br&gt;10）启动工作线程（SCF_async_worker，默认 32 个），开始阻塞从工作队列拉取任务；启动周期任务，每隔一分钟上报排队量（队列里的 task 数量）；启动服务：initSocketServer，设置相关 socket 参数，并开始监听端口&lt;br&gt;11）注册节点到注册中心，启动心跳周期任务，周期拉取白名单数据&lt;br&gt;12）注册关闭钩子，（进程退出时执行 IShutdown#shutdown，抛超时异常），关闭所有 Channel，释放 netty 依赖的外部资源&lt;/span&gt;" link="&lt;span style=&quot;color: rgb(52, 52, 52); font-family: Arial, &amp;quot;PingFang SC&amp;quot;, Helvetica, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;WenQuanYi Micro Hei&amp;quot;, sans-seri; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: pre-wrap; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; display: inline !important; float: none;&quot;&gt;1、服务启动流程：&#xa;1）初始化配置：初始化this.proxyBServiceBService默认配置；读取 scf_config.xml 配置文件重新覆盖配置；加载自定义日志实现；&#xa;2）创建框架自定义类加载器 SCFClassLoader，添加业务 jar 为加载路径&#xa;3）执行 IInit 实现类的 init 方法，可加载资源等（服务代理创建前）&#xa;4）扫描 service 目录下所有 jar（配置了不扫描的 jar 则直接跳过），找到所有 class 文件并加载，找到标注了服务注解、@Activate 的类，存起来(SessionBean)，通过 javassist 新建接口实现类代理（lookupProxyStubtime），新建 ProxyFactorytime（可根据 lookup 找到 lookupProxyStubtime），使用 SCFClassLoader 加载这些 class （find class），并反射创建实例，把 ProxyFactorytime，存到 Global 里&#xa;5）执行 IInit 实现类的 init 方法，可加载资源等（服务代理创建后）&#xa;6）加载并创建 IShutDown 实现类（用户指定），放到 Global 里&#xa;7）序列化扫包&#xa;8）加载并实例化 Filter（配置文件配置 + 注解配置），执行 init 方法，true 则加入 FilterChain&#xa;9）注册信号&#xa;10）启动工作线程（SCF_async_worker，默认 32 个），开始阻塞从工作队列拉取任务；启动周期任务，每隔一分钟上报排队量（队列里的 task 数量）；启动服务：initSocketServer，设置相关 socket 参数，并开始监听端口&#xa;11）注册节点到注册中心，启动心跳周期任务，周期拉取白名单数据&#xa;12）注册关闭钩子，（进程退出时执行 IShutdown#shutdown，抛超时异常），关闭所有 Channel，释放 netty 依赖的外部资源&lt;/span&gt;" id="P7ugXC-qR5eqg1KoZMmT-1">
          <mxCell style="text;whiteSpace=wrap;html=1;" parent="1" vertex="1">
            <mxGeometry x="1000" y="180" width="560" height="390" as="geometry" />
          </mxCell>
        </UserObject>
        <UserObject label="&lt;span style=&quot;color: rgb(52, 52, 52); font-family: Arial, &amp;quot;PingFang SC&amp;quot;, Helvetica, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;WenQuanYi Micro Hei&amp;quot;, sans-seri; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: pre-wrap; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; display: inline !important; float: none;&quot;&gt;服务方处理请求流程：&#xa;1、收到请求，检查头分隔符是否合法，将请求包装成 AsyncTask，轮询分配到一个 Worker 中（默认 32 个 Worker，每个 Worker 是一个 3 核心线程的线程池，维护一个任务队列）&#xa;2、worker 从队列中消费任务&#xa;1）如果任务排队超时，直接抛超时异常，进入 AsyncInvokerHandle#exceptionCaught，setSdpEntity 为 ExceptionProtocol；设置隐式传参响应；协议编码；上报异常；删除 SCFContext threadlocal；发送响应&#xa;2）没排队超时：&#xa;同步调用：设置 SCFContext 到 threadLocal 中（工作线程），删除残留的隐式传参（保险），协议解码，设置隐式传参；执行过滤器链（黑白名单、DoContext），走到 MethodCall，根据SCFContext 里的 lookup 从 ProxyFactory 里找到 xxxProxyStub，执行接口实现逻辑，返回 SCFResponse，接口返回结果存放在 SCFContext 中，接着逆序走过滤器链，进行协议编码，设置隐式传参；执行 AsyncInvokerHandle#messageReceived，根据响应类型上报监控，写回响应，最后删除 threadLocal （工作线程）中的 SCFContext。&#xa;&#xa;异步调用：设置 SCFContext 到 threadLocal 中（工作线程），删除残留的隐式传参（保险），协议解码，设置隐式传参；执行过滤器链（黑白名单、DoContext），在 DoContextFilter 中，设置 SCFContext async=true，并生成本次异步调用的 sessionId，把 &amp;lt;session, SCFContext&amp;gt; 映射关系保存，并创建一个WData（sessionId，createTime）扔进队列中，有半数cpu线程（CallBackUtil）在轮询队列，检查异步任务是否执行超时，超时则直接 AsynBack.send()返回异常；走到 MethodCall，根据SCFContext 里的 lookup 从 ProxyFactory 里找到 xxxProxyStub，执行接口实现逻辑&#xa;【服务端异步 新定义了半数cpu个Worker(&quot;SCF-asyncback_worker&quot;)，每个worker只有一个线程，用于处理结果】&#xa;AsynBack#send 调用后，添加一个处理异步响应任务到工作队列中，“SCF-asyncback_worke”消费任务，设置 SCFContext 到 threadLocal 中；获取过滤器链，如果是send异常，倒序执行 onError，然后执行 exceptionCaught(error)[拼接异常到协议中，协议编码等 并 返回给调用方]，上报异常监控，删除 ThreadLocal 的 SCFContext ，不执行 messageReceived 了；如果 send 正常结果，执行 倒序执行过滤器链的 doResponse，进行协议编码，接着执行 messageReceived，上报监控，写回响应，删除 ThreadLocal 的 SCFContext 。&lt;/span&gt;" link="&lt;span style=&quot;color: rgb(52, 52, 52); font-family: Arial, &amp;quot;PingFang SC&amp;quot;, Helvetica, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;WenQuanYi Micro Hei&amp;quot;, sans-seri; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: pre-wrap; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; display: inline !important; float: none;&quot;&gt;服务方处理请求流程：&#xa;1、收到请求，检查头分隔符是否合法，将请求包装成 AsyncTask，轮询分配到一个 Worker 中（默认 32 个 Worker，每个 Worker 是一个 3 核心线程的线程池，维护一个任务队列）&#xa;2、worker 从队列中消费任务&#xa;1）如果任务排队超时，直接抛超时异常，进入 AsyncInvokerHandle#exceptionCaught，setSdpEntity 为 ExceptionProtocol；设置隐式传参响应；协议编码；上报异常；删除 SCFContext threadlocal；发送响应&#xa;2）没排队超时：&#xa;同步调用：设置 SCFContext 到 threadLocal 中（工作线程），删除残留的隐式传参（保险），协议解码，设置隐式传参；执行过滤器链（黑白名单、DoContext），走到 MethodCall，根据SCFContext 里的 lookup 从 ProxyFactory 里找到 xxxProxyStub，执行接口实现逻辑，返回 SCFResponse，接口返回结果存放在 SCFContext 中，接着逆序走过滤器链，进行协议编码，设置隐式传参；执行 AsyncInvokerHandle#messageReceived，根据响应类型上报监控，写回响应，最后删除 threadLocal （工作线程）中的 SCFContext。&#xa;&#xa;异步调用：设置 SCFContext 到 threadLocal 中（工作线程），删除残留的隐式传参（保险），协议解码，设置隐式传参；执行过滤器链（黑白名单、DoContext），在 DoContextFilter 中，设置 SCFContext async=true，并生成本次异步调用的 sessionId，把 &amp;lt;session, SCFContext&amp;gt; 映射关系保存，并创建一个WData（sessionId，createTime）扔进队列中，有半数cpu线程（CallBackUtil）在轮询队列，检查异步任务是否执行超时，超时则直接 AsynBack.send()返回异常；走到 MethodCall，根据SCFContext 里的 lookup 从 ProxyFactory 里找到 xxxProxyStub，执行接口实现逻辑&#xa;【服务端异步 新定义了半数cpu个Worker(&quot;SCF-asyncback_worker&quot;)，每个worker只有一个线程，用于处理结果】&#xa;AsynBack#send 调用后，添加一个处理异步响应任务到工作队列中，“SCF-asyncback_worke”消费任务，设置 SCFContext 到 threadLocal 中；获取过滤器链，如果是send异常，倒序执行 onError，然后执行 exceptionCaught(error)[拼接异常到协议中，协议编码等 并 返回给调用方]，上报异常监控，删除 ThreadLocal 的 SCFContext ，不执行 messageReceived 了；如果 send 正常结果，执行 倒序执行过滤器链的 doResponse，进行协议编码，接着执行 messageReceived，上报监控，写回响应，删除 ThreadLocal 的 SCFContext 。&lt;/span&gt;" id="P7ugXC-qR5eqg1KoZMmT-2">
          <mxCell style="text;whiteSpace=wrap;html=1;" parent="1" vertex="1">
            <mxGeometry x="1160" y="620" width="560" height="590" as="geometry" />
          </mxCell>
        </UserObject>
        <UserObject label="scf-springboot-starter 启动流程：&lt;br&gt;1、如果 scf.server.enabled = true：ServiceAnnotationBeanPostProcessor （实现 BeanDefinitionRegistryPostProcessor）postProcessBeanDefinitionRegistry 方法 负责使用 SCFClassPathBeanDefinitionScanner（继承 ClassPathBeanDefinitionScanner）扫描标注了 @ServiceBehavior 的类，并注册为 BeanDefinition；postProcessBeanFactory 负责为每个服务实现类注册别名（lookup）&lt;br&gt;2、如果 1：SCFServiceProcessor （实现 ApplicationListener&amp;lt;ContextRefreshedEvent&amp;gt;），onApplicationEvent &lt;br&gt;1）执行 IInit 实现类的 init （创建代理前）&lt;br&gt;2）创建服务代理&lt;br&gt;3）执行 IInit 实现类的 init （创建代理后）&lt;br&gt;4）实例化 IShutdown，放进 Global 备用&lt;br&gt;5）注册信号&lt;br&gt;6）启动工作线程（默认 32 * 3），开始监听 tcp 端口&lt;br&gt;7）注册节点到注册中心，启动心跳周期任务，周期拉取白名单数据&lt;br&gt;8）注册关闭钩子，（进程退出时执行 IShutdown#shutdown，抛超时异常），关闭所有 Channel，释放 netty 依赖的外部资源&lt;br&gt;3、如果 scf.client.enabled = true：ClientAnnotationBeanPostProcessor（实现 BeanDefinitionRegistryPostProcessor，BeanPostProcessor），postProcessBeanDefinitionRegistry 获取 Spring 容器里所有 成员标注了 @SCFClient 的 BeanDefinition，存进 map &amp;lt;beanName（指成员）, ClientFieldInfo&amp;gt;，接着遍历 map，注册 BeanDefinition 进 Spring 容器，name 是 beanName，bd 是 FactoryBean（getObject 返回 Proxy.createProxy）; postProcessBeforeInitialization 执行 SCFInit.init key/scf.config，读取 client 配置，添加 filter 到 filterChain 中、添加 router 到 RouteChain 中；如果 bean 包含有 @SCFClient 修饰的成员，反射为这些成员赋值（通过 beanFactory.getBean(clientBeanName)，先前已经注册 bd 了）&lt;br&gt;4、SerializerAvailableCondition（实现 BeanDefinitionRegistryPostProcessor）：使用 SCFClassPathBeanDefinitionScanner（继承 ClassPathBeanDefinitionScanner）扫描配置的 package 下标注了 @SCFSerializable 的 Class，执行 TypeMap#InitTypeMap&lt;br&gt;5、ActivateAnnotationBeanPostProcessor（实现 BeanDefinitionRegistryPostProcessor、BeanPostProcessor、ApplicationListener&amp;lt;ContextRefreshedEvent&amp;gt;）postProcessBeanDefinitionRegistry：使用 SCFClassPathBeanDefinitionScanner（继承 ClassPathBeanDefinitionScanner）扫描配置的 package 下标注了 @Activate 的 Class，记录到 clientClassSet 和 serverClassSet，postProcessBeforeInitialization：对 @Activate 标记的 client filter 执行 init，onApplicationEvent：对 serviceConfig 配置的 、@Activate 标记的 server filter 执行 init，buildFilterChain" link="scf-springboot-starter 启动流程：&#xa;1、如果 scf.server.enabled = true：ServiceAnnotationBeanPostProcessor （实现 BeanDefinitionRegistryPostProcessor）postProcessBeanDefinitionRegistry 方法 负责使用 SCFClassPathBeanDefinitionScanner（继承 ClassPathBeanDefinitionScanner）扫描标注了 @ServiceBehavior 的类，并注册为 BeanDefinition；postProcessBeanFactory 负责为每个服务实现类注册别名（lookup）&#xa;2、如果 1：SCFServiceProcessor （实现 ApplicationListener&amp;lt;ContextRefreshedEvent&amp;gt;），onApplicationEvent &#xa;1）执行 IInit 实现类的 init （创建代理前）&#xa;2）创建服务代理&#xa;3）执行 IInit 实现类的 init （创建代理后）&#xa;4）实例化 IShutdown，放进 Global 备用&#xa;5）注册信号&#xa;6）启动工作线程（默认 32 * 3），开始监听 tcp 端口&#xa;7）注册节点到注册中心，启动心跳周期任务，周期拉取白名单数据&#xa;8）注册关闭钩子，（进程退出时执行 IShutdown#shutdown，抛超时异常），关闭所有 Channel，释放 netty 依赖的外部资源&#xa;3、如果 scf.client.enabled = true：ClientAnnotationBeanPostProcessor（实现 BeanDefinitionRegistryPostProcessor，BeanPostProcessor），postProcessBeanDefinitionRegistry 获取 Spring 容器里所有 成员标注了 @SCFClient 的 BeanDefinition，存进 map &amp;lt;beanName（指成员）, ClientFieldInfo&amp;gt;，接着遍历 map，注册 BeanDefinition 进 Spring 容器，name 是 beanName，bd 是 FactoryBean（getObject 返回 Proxy.createProxy）; postProcessBeforeInitialization 执行 SCFInit.init key/scf.config，读取 client 配置，添加 filter 到 filterChain 中、添加 router 到 RouteChain 中；如果 bean 包含有 @SCFClient 修饰的成员，反射为这些成员赋值（通过 beanFactory.getBean(clientBeanName)，先前已经注册 bd 了）&#xa;4、SerializerAvailableCondition（实现 BeanDefinitionRegistryPostProcessor）：使用 SCFClassPathBeanDefinitionScanner（继承 ClassPathBeanDefinitionScanner）扫描配置的 package 下标注了 @SCFSerializable 的 Class，执行 TypeMap#InitTypeMap&#xa;5、ActivateAnnotationBeanPostProcessor（实现 BeanDefinitionRegistryPostProcessor、BeanPostProcessor、ApplicationListener&amp;lt;ContextRefreshedEvent&amp;gt;）postProcessBeanDefinitionRegistry：使用 SCFClassPathBeanDefinitionScanner（继承 ClassPathBeanDefinitionScanner）扫描配置的 package 下标注了 @Activate 的 Class，记录到 clientClassSet 和 serverClassSet，postProcessBeforeInitialization：对 @Activate 标记的 client filter 执行 init，onApplicationEvent：对 serviceConfig 配置的 、@Activate 标记的 server filter 执行 init，buildFilterChain&#xa;&lt;div style=&quot;margin: 0px; padding: 0px; font-weight: 400; outline: none !important;&quot;&gt;&lt;br style=&quot;color: rgb(52, 52, 52); font-family: Arial, &amp;quot;PingFang SC&amp;quot;, Helvetica, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;WenQuanYi Micro Hei&amp;quot;, sans-seri; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: pre-wrap; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;&quot;&gt;&lt;/div&gt;" id="P7ugXC-qR5eqg1KoZMmT-3">
          <mxCell style="text;whiteSpace=wrap;html=1;" parent="1" vertex="1">
            <mxGeometry x="290" y="690" width="560" height="560" as="geometry" />
          </mxCell>
        </UserObject>
      </root>
    </mxGraphModel>
  </diagram>
  <diagram id="7qwpTuSZ9aXFFL-PGO27" name="要点">
    <mxGraphModel dx="1114" dy="577" grid="1" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="1" pageScale="1" pageWidth="1169" pageHeight="827" math="0" shadow="0">
      <root>
        <mxCell id="0" />
        <mxCell id="1" parent="0" />
        <mxCell id="dM85YeOS0lzmobvV3fVT-1" value="&lt;span style=&quot;color: rgb(52, 52, 52); font-family: Arial, &amp;quot;PingFang SC&amp;quot;, Helvetica, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;WenQuanYi Micro Hei&amp;quot;, sans-seri; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: pre-wrap; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; display: inline !important; float: none;&quot;&gt;SCF（Service Communication Framework）是58自研的RPC框架，具备高性能、高并发、高可靠、跨平台、简单易用、安全性高等特点。&lt;/span&gt;&lt;span style=&quot;color: rgb(52, 52, 52); font-family: Arial, &amp;quot;PingFang SC&amp;quot;, Helvetica, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;WenQuanYi Micro Hei&amp;quot;, sans-seri; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: pre-wrap; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(52, 52, 52); font-family: Arial, &amp;quot;PingFang SC&amp;quot;, Helvetica, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;WenQuanYi Micro Hei&amp;quot;, sans-seri; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: pre-wrap; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; display: inline !important; float: none;&quot;&gt;&#xa;&lt;/span&gt;&lt;span style=&quot;color: rgb(52, 52, 52); font-family: Arial, &amp;quot;PingFang SC&amp;quot;, Helvetica, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;WenQuanYi Micro Hei&amp;quot;, sans-seri; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: pre-wrap; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(52, 52, 52); font-family: Arial, &amp;quot;PingFang SC&amp;quot;, Helvetica, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;WenQuanYi Micro Hei&amp;quot;, sans-seri; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: pre-wrap; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; display: inline !important; float: none;&quot;&gt;1、基于自定义二进制序列化算法，提高通信效率&lt;/span&gt;&lt;span style=&quot;color: rgb(52, 52, 52); font-family: Arial, &amp;quot;PingFang SC&amp;quot;, Helvetica, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;WenQuanYi Micro Hei&amp;quot;, sans-seri; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: pre-wrap; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(52, 52, 52); font-family: Arial, &amp;quot;PingFang SC&amp;quot;, Helvetica, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;WenQuanYi Micro Hei&amp;quot;, sans-seri; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: pre-wrap; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; display: inline !important; float: none;&quot;&gt;&#xa;&lt;/span&gt;&lt;span style=&quot;color: rgb(52, 52, 52); font-family: Arial, &amp;quot;PingFang SC&amp;quot;, Helvetica, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;WenQuanYi Micro Hei&amp;quot;, sans-seri; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: pre-wrap; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(52, 52, 52); font-family: Arial, &amp;quot;PingFang SC&amp;quot;, Helvetica, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;WenQuanYi Micro Hei&amp;quot;, sans-seri; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: pre-wrap; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; display: inline !important; float: none;&quot;&gt;2、支持调用方同步/异步调用，服务方同步/异步执行&lt;/span&gt;&lt;span style=&quot;color: rgb(52, 52, 52); font-family: Arial, &amp;quot;PingFang SC&amp;quot;, Helvetica, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;WenQuanYi Micro Hei&amp;quot;, sans-seri; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: pre-wrap; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(52, 52, 52); font-family: Arial, &amp;quot;PingFang SC&amp;quot;, Helvetica, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;WenQuanYi Micro Hei&amp;quot;, sans-seri; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: pre-wrap; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; display: inline !important; float: none;&quot;&gt;&#xa;3、支持链式过滤器/隐式传参/泛化调用/自定义路由等功能&#xa;4、每个调用方会被分配一个服务分组，请求会发到分组内节点，支持人工调整分组内节点内容，并动态下发最新节点列表给调用方&lt;/span&gt;&lt;span style=&quot;color: rgb(52, 52, 52); font-family: Arial, &amp;quot;PingFang SC&amp;quot;, Helvetica, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;WenQuanYi Micro Hei&amp;quot;, sans-seri; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: pre-wrap; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(52, 52, 52); font-family: Arial, &amp;quot;PingFang SC&amp;quot;, Helvetica, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;WenQuanYi Micro Hei&amp;quot;, sans-seri; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: pre-wrap; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; display: inline !important; float: none;&quot;&gt;&#xa;5、支持给调用方节点配置灰度调用关系，请求具体的服务方节点/分组&lt;/span&gt;&lt;span style=&quot;color: rgb(52, 52, 52); font-family: Arial, &amp;quot;PingFang SC&amp;quot;, Helvetica, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;WenQuanYi Micro Hei&amp;quot;, sans-seri; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: pre-wrap; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(52, 52, 52); font-family: Arial, &amp;quot;PingFang SC&amp;quot;, Helvetica, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;WenQuanYi Micro Hei&amp;quot;, sans-seri; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: pre-wrap; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; display: inline !important; float: none;&quot;&gt;&#xa;6、服务方可以针对调用方进行限流&lt;/span&gt;&lt;span style=&quot;color: rgb(52, 52, 52); font-family: Arial, &amp;quot;PingFang SC&amp;quot;, Helvetica, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;WenQuanYi Micro Hei&amp;quot;, sans-seri; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: pre-wrap; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;&quot;&gt;&lt;/span&gt;&lt;span style=&quot;color: rgb(52, 52, 52); font-family: Arial, &amp;quot;PingFang SC&amp;quot;, Helvetica, &amp;quot;Microsoft YaHei&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, &amp;quot;Hiragino Sans GB&amp;quot;, &amp;quot;WenQuanYi Micro Hei&amp;quot;, sans-seri; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: pre-wrap; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; display: inline !important; float: none;&quot;&gt;&#xa;7、完备的监控平台，监控访问量/异常量请求排队量/抛弃量等&lt;/span&gt;" style="text;whiteSpace=wrap;html=1;" vertex="1" parent="1">
          <mxGeometry x="240" y="160" width="560" height="190" as="geometry" />
        </mxCell>
      </root>
    </mxGraphModel>
  </diagram>
</mxfile>
